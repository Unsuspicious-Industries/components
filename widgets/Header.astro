---
import { Icon } from "astro-icon/components";
import Logo from "~/components/Logo.astro";
import ToggleMenu from "~/components/common/ToggleMenu.astro";
import Button from "~/components/ui/Button.astro";

import { getHomePermalink } from "~/utils/permalinks";
import { trimSlash, getAsset } from "~/utils/permalinks";
import type { CallToAction } from "~/types";

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface ActionLink extends CallToAction {}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<ActionLink>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  position?: string;
  logoSrc?: string;
  logoName?: string;
  logoAcronym?: string;
}

const {
  id = "header",
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  position = "center",
  logoSrc = undefined,
  logoName = undefined,
  logoAcronym = undefined,
} = Astro.props;



const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky },
    "site-header top-0 z-40 flex-none mx-auto w-full border-b border-gray-200 transition-[opacity] ease-in-out",
  ]}
  {...isSticky ? { "data-aw-sticky-header": true } : {}}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0 bg-white/80 backdrop-blur-md"></div>
  <div
    class:list={[
      "relative text-default py-3 px-3 md:px-6 mx-auto w-full md:flex md:justify-between",
      { "max-w-7xl": !isFullWidth }
    ]}
  >
    <div class:list={[
      position === "right" && "mr-auto",
      position === "right" && "rtl:mr-0",
      position === "right" && "rtl:ml-auto",
      "flex justify-between"
    ]}>
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo src={logoSrc} name={logoName} acronym={logoAcronym} />
      </a>
      <div class="flex items-center md:hidden">
        <ToggleMenu />
      </div>
    </div>
    <nav
      class="w-full md:w-auto hidden md:flex md:items-center text-default md:mx-5 absolute md:static top-full left-0 right-0 bg-white md:bg-transparent backdrop-blur-md border-b border-gray-200 md:border-0 md:backdrop-blur-0 z-50 shadow-md md:shadow-none max-h-[80vh] overflow-y-auto"
      aria-label="Main navigation"
    >
      <ul
        class="flex flex-col md:flex-row md:self-center w-full md:w-auto text-sm md:text-[0.9375rem] tracking-[0.01rem] font-medium py-1 md:py-0 px-1 md:px-0 text-gray-900 md:text-default"
      >
        {
          links.map(({ text, href, links }) => (
            <li class:list={[links?.length ? "dropdown" : ""]}>
              {links?.length ? (
                  <button class="hover:text-gray-600 hover:bg-gray-50 md:hover:text-link px-3 py-1.5 flex items-center w-full text-left justify-start rounded-md transition-colors duration-150">
                    {text} <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden md:inline" />
                  </button>
                  <ul class="dropdown-menu md:backdrop-blur-md rounded md:absolute pl-2 md:pl-0 md:hidden font-medium md:bg-white/90 md:min-w-[200px] drop-shadow-xl">
                    {links.map(({ text: text2, href: href2 }) => (
                      <li>
                        <a
                          class:list={[
                            "first:rounded-t last:rounded-b md:hover:bg-gray-100 hover:text-link py-1.5 px-3 block whitespace-no-wrap",
                            { "aw-link-active" : href2 === currentPath}
                          ]}
                          href={href2}
                        >
                          {text2}
                        </a>
                      </li>
                    ))}
                  </ul>
              ) : (
                <a
                  class:list={[
                    "hover:text-gray-600 hover:bg-gray-50 md:hover:text-link px-3 py-1.5 flex items-center w-full rounded-md transition-colors duration-150",
                    { "aw-link-active": href === currentPath }
                  ]}
                  href={href}
                >
                  {text}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>
    <div
      class:list={[
        position === "left" && "ml-auto",
        position === "left" && "rtl:ml-0",
        position === "left" && "rtl:mr-auto",
        "md:self-center",
        "md:flex",
        "items-center",
        "md:mb-0",
        "fixed",
        "w-full",
        "md:w-auto",
        "md:static",
        "justify-end",
        "left-0",
        "rtl:left-auto",
        "rtl:right-0",
        "bottom-0",
        "p-3",
        "md:p-0"
      ]}
    >
      <div class="items-center flex justify-between w-full md:w-auto">
        {
          actions?.length ? (
            <span class="ml-4 rtl:ml-0 rtl:mr-4">
              {actions.map((btnProps) => (
                <Button {...btnProps} class="ml-2 py-2.5 px-5.5 md:px-6 font-semibold shadow-none text-sm w-auto"/>
              ))}
            </span>
          ) : (
            ""
          )
        }
      </div>
    </div>
  </div>
</header>